package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// StudioReservations represents a row from 'public.studio_reservations'.
type StudioReservations struct {
	StudioReservationID int        `json:"studio_reservation_id"` // studio_reservation_id
	ReservationID       int        `json:"reservation_id"`        // reservation_id
	ReservationName     string     `json:"reservation_name"`      // reservation_name
	CreatedAt           time.Time  `json:"created_at"`            // created_at
	UpdatedAt           time.Time  `json:"updated_at"`            // updated_at
}

// StudioReservationsByStudioID runs a custom query, returning results as StudioReservations.
func StudioReservationsByStudioID(ctx context.Context, db DB, studioID int) ([]*StudioReservations, error) {
	// query
	const sqlstr = `SELECT sr.studio_reservation_id, ` +
		`sr.reservation_id, ` +
		`r.reservation_name, ` +
		`sr.created_at, ` +
		`sr.updated_at ` +
		`FROM studio_reservation AS sr ` +
		`LEFT JOIN reservation AS r ON sr.reservation_id = r.reservation_id ` +
		`WHERE sr.studio_id = $1 ` +
		`AND sr.is_deleted IS FALSE;`
	// run
	logf(sqlstr, studioID)
	rows, err := db.QueryContext(ctx, sqlstr, studioID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*StudioReservations
	for rows.Next() {
		var sr StudioReservations
		// scan
		if err := rows.Scan(&sr.StudioReservationID, &sr.ReservationID, &sr.ReservationName, &sr.CreatedAt, &sr.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sr)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
