package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Rooms represents a row from 'public.rooms'.
type Rooms struct {
	RoomID              int        `json:"room_id"`               // room_id
	RoomName            string     `json:"room_name"`             // room_name
	ReservationURL      *string    `json:"reservation_url"`       // reservation_url
	MinReservablePeople *int       `json:"min_reservable_people"` // min_reservable_people
	MaxReservablePeople *int       `json:"max_reservable_people"` // max_reservable_people
	FloorArea           *float64   `json:"floor_area"`            // floor_area
	CreatedAt           time.Time  `json:"created_at"`            // created_at
	UpdatedAt           *time.Time `json:"updated_at"`            // updated_at
}

// RoomsByStudioID runs a custom query, returning results as Rooms.
func RoomsByStudioID(ctx context.Context, db DB, studioID int) ([]*Rooms, error) {
	// query
	const sqlstr = `SELECT ` +
		`room_id, ` +
		`room_name, ` +
		`reservation_url, ` +
		`min_reservable_people, ` +
		`max_reservable_people, ` +
		`floor_area, ` +
		`created_at, ` +
		`updated_at ` +
		`FROM ` +
		`room ` +
		`WHERE ` +
		`studio_id = $1 ` +
		`AND is_deleted IS FALSE ` +
		`;`
	// run
	logf(sqlstr, studioID)
	rows, err := db.QueryContext(ctx, sqlstr, studioID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Rooms
	for rows.Next() {
		var r Rooms
		// scan
		if err := rows.Scan(&r.RoomID, &r.RoomName, &r.ReservationURL, &r.MinReservablePeople, &r.MaxReservablePeople, &r.FloorArea, &r.CreatedAt, &r.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
