package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Studio represents a row from 'public.studio'.
type Studio struct {
	StudioID       int        `json:"studio_id"`         // studio_id
	StudioName     string     `json:"studio_name"`       // studio_name
	Introduction   *string    `json:"introduction"`      // introduction
	Precaution     *string    `json:"precaution"`        // precaution
	HomepageURL    *string    `json:"homepage_url"`      // homepage_url
	Contact        string     `json:"contact"`           // contact
	AddressID      int        `json:"address_id"`        // address_id
	AddressName    string     `json:"address_name"`      // address_name
	CityID         int        `json:"city_id"`           // city_id
	CityName       string     `json:"city_name"`         // city_name
	PrefectureID   int        `json:"prefecture_id"`     // prefecture_id
	PrefectureName string     `json:"prefecture_name"`   // prefecture_name
	RentByMinHours float64    `json:"rent_by_min_hours"` // rent_by_min_hours
	CanFreeCancel  *bool      `json:"can_free_cancel"`   // can_free_cancel
	CreatedAt      time.Time  `json:"created_at"`        // created_at
	UpdatedAt      *time.Time `json:"updated_at"`        // updated_at
}

// StudiosByStudioID runs a custom query, returning results as Studio.
func StudiosByStudioID(ctx context.Context, db DB, studioID int) ([]*Studio, error) {
	// query
	const sqlstr = `SELECT ` +
		`s.studio_id, ` +
		`s.studio_name, ` +
		`s.introduction, ` +
		`s.precaution, ` +
		`s.homepage_url, ` +
		`s.contact, ` +
		`a.address_id, ` +
		`a.address_name, ` +
		`c.city_id, ` +
		`c.city_name, ` +
		`p.prefecture_id, ` +
		`p.prefecture_name, ` +
		`s.rent_by_min_hours, ` +
		`s.can_free_cancel, ` +
		`s.created_at, ` +
		`s.updated_at ` +
		`FROM ` +
		`studio AS s ` +
		`LEFT JOIN ` +
		`address AS a ` +
		`ON  s.address_id = a.address_id ` +
		`LEFT JOIN ` +
		`city AS c ` +
		`ON  a.city_id = c.city_id ` +
		`LEFT JOIN ` +
		`prefecture AS p ` +
		`ON  p.prefecture_id = c.prefecture_id ` +
		`WHERE ` +
		`s.studio_id = $1 ` +
		`AND s.is_deleted IS FALSE ` +
		`;`
	// run
	logf(sqlstr, studioID)
	rows, err := db.QueryContext(ctx, sqlstr, studioID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*Studio
	for rows.Next() {
		var s Studio
		// scan
		if err := rows.Scan(&s.StudioID, &s.StudioName, &s.Introduction, &s.Precaution, &s.HomepageURL, &s.Contact, &s.AddressID, &s.AddressName, &s.CityID, &s.CityName, &s.PrefectureID, &s.PrefectureName, &s.RentByMinHours, &s.CanFreeCancel, &s.CreatedAt, &s.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &s)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
