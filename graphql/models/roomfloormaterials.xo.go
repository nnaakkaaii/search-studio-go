package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// RoomFloorMaterials represents a row from 'public.room_floor_materials'.
type RoomFloorMaterials struct {
	RoomFloorMaterialID int        `json:"room_floor_material_id"` // room_floor_material_id
	FloorMaterialID     int        `json:"floor_material_id"`      // floor_material_id
	FloorMaterialName   string     `json:"floor_material_name"`    // floor_material_name
	CreatedAt           time.Time  `json:"created_at"`             // created_at
	UpdatedAt           *time.Time `json:"updated_at"`             // updated_at
}

// RoomFloorMaterialsByRoomID runs a custom query, returning results as RoomFloorMaterials.
func RoomFloorMaterialsByRoomID(ctx context.Context, db DB, roomID int) ([]*RoomFloorMaterials, error) {
	// query
	const sqlstr = `SELECT ` +
		`rfm.room_floor_material_id, ` +
		`rfm.floor_material_id, ` +
		`fm.floor_material_name, ` +
		`rfm.created_at, ` +
		`rfm.updated_at ` +
		`FROM ` +
		`room_floor_material AS rfm ` +
		`LEFT JOIN ` +
		`floor_material AS fm ` +
		`ON  rfm.floor_material_id = fm.floor_material_id ` +
		`WHERE ` +
		`rfm.room_id = $1 ` +
		`AND rfm.is_deleted IS FALSE ` +
		`;`
	// run
	logf(sqlstr, roomID)
	rows, err := db.QueryContext(ctx, sqlstr, roomID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*RoomFloorMaterials
	for rows.Next() {
		var rfm RoomFloorMaterials
		// scan
		if err := rows.Scan(&rfm.RoomFloorMaterialID, &rfm.FloorMaterialID, &rfm.FloorMaterialName, &rfm.CreatedAt, &rfm.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &rfm)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
