package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// RoomImages represents a row from 'public.room_images'.
type RoomImages struct {
	RoomImageID int        `json:"room_image_id"` // room_image_id
	ImageID     int        `json:"image_id"`      // image_id
	ImageName   string     `json:"image_name"`    // image_name
	ImagePath   string     `json:"image_path"`    // image_path
	CreatedAt   time.Time  `json:"created_at"`    // created_at
	UpdatedAt   *time.Time `json:"updated_at"`    // updated_at
	Description *string    `json:"description"`   // description
}

// RoomImagesByRoomID runs a custom query, returning results as RoomImages.
func RoomImagesByRoomID(ctx context.Context, db DB, roomID int) ([]*RoomImages, error) {
	// query
	const sqlstr = `SELECT ` +
		`ri.room_image_id, ` +
		`ri.image_id, ` +
		`i.image_name, ` +
		`i.image_path, ` +
		`i.created_at, ` +
		`i.updated_at, ` +
		`ri.description ` +
		`FROM ` +
		`room_image AS ri ` +
		`LEFT JOIN ` +
		`Image AS i ` +
		`ON  ri.image_id = i.image_id ` +
		`WHERE ` +
		`ri.room_id = $1 ` +
		`AND i.is_deleted IS FALSE ` +
		`;`
	// run
	logf(sqlstr, roomID)
	rows, err := db.QueryContext(ctx, sqlstr, roomID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*RoomImages
	for rows.Next() {
		var ri RoomImages
		// scan
		if err := rows.Scan(&ri.RoomImageID, &ri.ImageID, &ri.ImageName, &ri.ImagePath, &ri.CreatedAt, &ri.UpdatedAt, &ri.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ri)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
