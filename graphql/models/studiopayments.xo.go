package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// StudioPayments represents a row from 'public.studio_payments'.
type StudioPayments struct {
	StudioPaymentID int       `json:"studio_payment_id"` // studio_payment_id
	PaymentID       int       `json:"payment_id"`        // payment_id
	PaymentName     string    `json:"payment_name"`      // payment_name
	CreatedAt       time.Time `json:"created_at"`        // created_at
	UpdatedAt       time.Time `json:"updated_at"`        // updated_at
}

// StudioPaymentsByStudioID runs a custom query, returning results as StudioPayments.
func StudioPaymentsByStudioID(ctx context.Context, db DB, studioID int) ([]*StudioPayments, error) {
	// query
	const sqlstr = `SELECT sp.studio_payment_id, ` +
		`sp.payment_id, ` +
		`p.payment_name, ` +
		`sp.created_at, ` +
		`sp.updated_at ` +
		`FROM studio_payment AS sp ` +
		`LEFT JOIN payment AS p ON sp.payment_id = p.payment_id ` +
		`WHERE sp.studio_id = $1 ` +
		`AND sp.is_deleted IS FALSE;`
	// run
	logf(sqlstr, studioID)
	rows, err := db.QueryContext(ctx, sqlstr, studioID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*StudioPayments
	for rows.Next() {
		var sp StudioPayments
		// scan
		if err := rows.Scan(&sp.StudioPaymentID, &sp.PaymentID, &sp.PaymentName, &sp.CreatedAt, &sp.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &sp)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
