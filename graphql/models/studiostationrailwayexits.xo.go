package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// StudioStationRailwayExits represents a row from 'public.studio_station_railway_exits'.
type StudioStationRailwayExits struct {
	StudioStationRailwayExitID int       `json:"studio_station_railway_exit_id"` // studio_station_railway_exit_id
	StationRailwayExitID       int       `json:"station_railway_exit_id"`        // station_railway_exit_id
	StationRailwayID           int       `json:"station_railway_id"`             // station_railway_id
	StationID                  int       `json:"station_id"`                     // station_id
	StationName                string    `json:"station_name"`                   // station_name
	RailwayID                  int       `json:"railway_id"`                     // railway_id
	RailwayName                string    `json:"railway_name"`                   // railway_name
	ExitID                     int       `json:"exit_id"`                        // exit_id
	ExitName                   string    `json:"exit_name"`                      // exit_name
	MinutesFromStation         int       `json:"minutes_from_station"`           // minutes_from_station
	CreatedAt                  time.Time `json:"created_at"`                     // created_at
	UpdatedAt                  time.Time `json:"updated_at"`                     // updated_at
}

// StudioStationRailwayExitsByStudioID runs a custom query, returning results as StudioStationRailwayExits.
func StudioStationRailwayExitsByStudioID(ctx context.Context, db DB, studioID int) ([]*StudioStationRailwayExits, error) {
	// query
	const sqlstr = `SELECT ssre.studio_station_railway_exit_id, ` +
		`ssre.station_railway_exit_id, ` +
		`sre.station_railway_id, ` +
		`sr.station_id, ` +
		`s.station_name, ` +
		`sr.railway_id, ` +
		`r.railway_name, ` +
		`sre.exit_id, ` +
		`e.exit_name, ` +
		`ssre.minutes_from_station, ` +
		`ssre.created_at, ` +
		`ssre.updated_at ` +
		`FROM studio_station_railway_exit AS ssre ` +
		`LEFT JOIN station_railway_exit AS sre ON ssre.station_railway_exit_id = sre.station_railway_exit_id ` +
		`LEFT JOIN station_railway AS sr ON sre.station_railway_id = sr.station_railway_id ` +
		`LEFT JOIN station AS s ON sr.station_id = s.station_id ` +
		`LEFT JOIN railway AS r ON sr.railway_id = r.railway_id ` +
		`LEFT JOIN exit AS e ON sre.exit_id = e.exit_id ` +
		`WHERE ssre.studio_id = $1 ` +
		`AND ssre.is_deleted IS FALSE;`
	// run
	logf(sqlstr, studioID)
	rows, err := db.QueryContext(ctx, sqlstr, studioID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// load results
	var res []*StudioStationRailwayExits
	for rows.Next() {
		var ssre StudioStationRailwayExits
		// scan
		if err := rows.Scan(&ssre.StudioStationRailwayExitID, &ssre.StationRailwayExitID, &ssre.StationRailwayID, &ssre.StationID, &ssre.StationName, &ssre.RailwayID, &ssre.RailwayName, &ssre.ExitID, &ssre.ExitName, &ssre.MinutesFromStation, &ssre.CreatedAt, &ssre.UpdatedAt); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ssre)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}
