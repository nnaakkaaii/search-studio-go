# Generated by Django 3.2.6 on 2021-08-15 18:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(help_text='住所。必須。', max_length=256, verbose_name='住所')),
                ('exit', models.CharField(blank=True, help_text='出口名。不明な場合は空に。', max_length=32, null=True, verbose_name='出口名')),
                ('minutes_from_station', models.FloatField(blank=True, help_text='駅から徒歩何分か', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='駅から徒歩何分か')),
            ],
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('stand-light', 'stand-light'), ('color-light', 'color-light'), ('phone-stand', 'phone-stand'), ('phone-lens', 'phone-lens'), ('filming-equipment', 'filming-equipment'), ('dj', 'dj'), ('mic', 'mic'), ('headset-mic', 'headset-mic'), ('mic-stand', 'mic-stand'), ('keyboard', 'keyboard'), ('music-stand', 'music-stand'), ('projector', 'projector'), ('monitor', 'monitor'), ('bluray', 'bluray'), ('desk', 'desk'), ('chair', 'chair'), ('whiteboard', 'whiteboard'), ('partition', 'partition'), ('ballet-bar', 'ballet-bar'), ('tap-board', 'tap-board'), ('yoga-mat', 'yoga-mat'), ('yoga-goods', 'yoga-goods'), ('training-goods', 'training-goods'), ('heel-cover', 'heel-cover'), ('hanger', 'hanger'), ('charger', 'charger'), ('alcohol', 'alcohol')], help_text='存在するアメニティを列挙する。必須。', max_length=64, verbose_name='アメニティ名')),
                ('count', models.IntegerField(blank=True, help_text='アメニティの総数。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='アメニティ総数')),
                ('price', models.FloatField(help_text='アメニティの利用料金。必須。', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='アメニティ利用料金')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.CharField(help_text='市区町村ID (C0001)。必須。', max_length=5, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='市区町村ID')),
                ('name', models.CharField(help_text='市区町村名 (渋谷区)。必須。', max_length=32, verbose_name='市区町村名')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='間取り、外観など画像の名前。必須。', max_length=32, verbose_name='画像の名前')),
                ('description', models.TextField(blank=True, help_text='表示したい画像の説明。必要ない場合は空に。', max_length=300, null=True, verbose_name='画像の説明')),
                ('path', models.URLField(help_text='画像の保存されたパス。通常はAWSのS3へのパス。必須。', verbose_name='画像のパス')),
            ],
        ),
        migrations.CreateModel(
            name='Line',
            fields=[
                ('id', models.CharField(help_text='路線ID (A001)。必須。', max_length=4, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(4)], verbose_name='路線ID')),
                ('name', models.CharField(blank=True, help_text='路線名 (山手線)。不明な場合は空に。', max_length=16, null=True, verbose_name='路線名')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.CharField(help_text='決済方法ID (Q01)。必須。', max_length=3, primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(3)], verbose_name='決済方法ID')),
                ('name', models.CharField(choices=[('online-payment', 'オンライン決済'), ('conbini-payment', 'コンビニ決済'), ('onsite-payment', '現地決済')], help_text='決済方法名 (オンライン決済)。必須。', max_length=32, verbose_name='決済方法名')),
            ],
        ),
        migrations.CreateModel(
            name='Prefecture',
            fields=[
                ('id', models.CharField(help_text='都道府県ID (P01)。必須。', max_length=3, primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(3)], verbose_name='都道府県ID')),
                ('name', models.CharField(help_text='都道府県名 (東京都)。必須。', max_length=32, verbose_name='都道府県名')),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.CharField(help_text='予約方法ID (R01)。必須。', max_length=3, primary_key=True, serialize=False, validators=[django.core.validators.MinValueValidator(3)], verbose_name='予約方法ID')),
                ('name', models.CharField(choices=[('this-reservation', 'サイト予約'), ('web-reservation', 'Web予約'), ('line-reservation', 'LINE予約'), ('inquiry-reservation', 'フォーム予約')], help_text='予約方法名 (サイト決済)。必須。', max_length=32, verbose_name='予約方法名')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='部屋の名称。必須。', max_length=64, verbose_name='部屋名')),
                ('reserve_url', models.URLField(blank=True, help_text='予約ページへのURL。不明な場合は空に。', null=True, verbose_name='予約ページURL')),
                ('min_people', models.IntegerField(blank=True, help_text='予約可能な最低人数。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='予約可能最低人数')),
                ('max_people', models.IntegerField(blank=True, help_text='予約可能な最大人数。部屋の収容人数。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(101)], verbose_name='予約可能最大人数')),
                ('floor_area', models.FloatField(blank=True, help_text='スタジオの部屋の床面積。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='床面積')),
                ('floor_material', models.CharField(blank=True, choices=[('looring', 'looring'), ('linoleum', 'linoleum'), ('pvc-tile', 'pvc-tile')], help_text='スタジオの部屋の床の素材。不明な場合は空に。', max_length=32, null=True, verbose_name='床素材')),
                ('mirror_length', models.FloatField(blank=True, help_text='スタジオの部屋の鏡の長さ。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='鏡長さ')),
            ],
        ),
        migrations.CreateModel(
            name='RoomFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('two-sides-mirror', 'two-sides-mirror'), ('color-control', 'color-control'), ('colored-lighting', 'colored-lighting'), ('mirror-ball', 'mirror-ball'), ('phone-holder', 'phone-holder'), ('mixer', 'mixer'), ('cd', 'cd'), ('ipod', 'ipod'), ('bluetooth', 'bluetooth'), ('curtain', 'curtain')], help_text='部屋の設備。必須。', max_length=32, verbose_name='部屋設備名')),
                ('count', models.IntegerField(blank=True, help_text='部屋の設備の総数。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='部屋設備総数')),
                ('price', models.FloatField(help_text='部屋の設備の利用料金。必須。', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='部屋設備利用料金')),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workload', models.FloatField(help_text='連続するworkloadが1以上になって初めて予約が可能 つまり、3枠連続しないと予約できない枠のworkloadは0.33 1枠で予約できる枠のworkloadは1', validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='予約枠単位')),
                ('time_begin', models.IntegerField(help_text='予約開始時間。必須。', validators=[django.core.validators.MinValueValidator(1600000000), django.core.validators.MaxValueValidator(3200000000)], verbose_name='予約開始時間')),
                ('time_end', models.IntegerField(help_text='予約終了時間。必須。', validators=[django.core.validators.MinValueValidator(1600000000), django.core.validators.MaxValueValidator(3200000000)], verbose_name='予約終了時間')),
                ('price', models.FloatField(help_text='ある部屋のある枠にかかる料金。必須。', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100000)], verbose_name='部屋料金')),
                ('count', models.IntegerField(help_text='部屋の残り枠数。必須。', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='部屋残り枠数')),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.CharField(help_text='駅ID (S0001)。必須。', max_length=5, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='駅ID')),
                ('name', models.CharField(blank=True, help_text='駅名 (渋谷駅)。不明な場合は空に。', max_length=32, null=True, verbose_name='駅名')),
            ],
        ),
        migrations.CreateModel(
            name='StudioFacility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('male-changing-room', 'male-changing-room'), ('female-changing-room', 'female-changing-room'), ('shower-room', 'shower-room'), ('smoking-room', 'smoking-room'), ('waiting-space', 'waiting-space'), ('parking', 'parking'), ('wifi', 'wifi')], help_text='スタジオの設備の名称。必須。', max_length=32, verbose_name='スタジオ設備名')),
                ('count', models.IntegerField(blank=True, help_text='スタジオの設備の総数。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='スタジオ設備総数')),
                ('price', models.FloatField(help_text='スタジオの設備の料金。必須。', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='スタジオ設備料金')),
            ],
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('id', models.CharField(help_text='スタジオID (99999999)。必須。', max_length=8, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='スタジオID')),
                ('name', models.CharField(help_text='スタジオ名 (Mission)。必須。', max_length=256, verbose_name='スタジオ名')),
                ('introduction', models.TextField(blank=True, help_text='表示する紹介文を任意で記載する。markdownが利用可能。', max_length=10000, null=True, verbose_name='紹介文')),
                ('precaution', models.TextField(blank=True, help_text='表示する注意事項を任意で記載する。markdownが利用可能。', max_length=10000, null=True, verbose_name='注意事項')),
                ('homepage_url', models.URLField(blank=True, help_text='スタジオのホームページのURL。不明な場合は空に。', null=True, verbose_name='ホームページURL')),
                ('contact', models.CharField(blank=True, help_text='スタジオの電話番号。不明な場合は空に。', max_length=11, null=True, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='連絡先')),
                ('rent_by_hours', models.FloatField(blank=True, help_text='スタジオの表示上の予約可能な最低時間。表示上なので深夜などは考慮せず標準的な時間のみを示す。不明な場合は空に。', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='表示予約可能最低時間')),
                ('free_cancel', models.BooleanField(blank=True, help_text='指定期間外であればキャンセルが無料で可能か。不明な場合は空に。', null=True, verbose_name='キャンセル可否')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='情報の掲載日。作成時に自動で追加されて以降編集されない。', verbose_name='掲載日')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='情報の更新日。更新時に毎回自動で追加される。', verbose_name='更新日')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.address')),
                ('amenities', models.ManyToManyField(to='search.Amenity')),
                ('facilities', models.ManyToManyField(to='search.StudioFacility')),
                ('images', models.ManyToManyField(to='search.Image')),
                ('payment', models.ManyToManyField(to='search.Payment')),
                ('reservation', models.ManyToManyField(to='search.Reservation')),
                ('rooms', models.ManyToManyField(to='search.Room')),
            ],
        ),
        migrations.AddField(
            model_name='room',
            name='facilities',
            field=models.ManyToManyField(to='search.RoomFacility'),
        ),
        migrations.AddField(
            model_name='room',
            name='images',
            field=models.ManyToManyField(to='search.Image'),
        ),
        migrations.AddField(
            model_name='room',
            name='slots',
            field=models.ManyToManyField(to='search.Slot'),
        ),
        migrations.AddField(
            model_name='address',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.city'),
        ),
        migrations.AddField(
            model_name='address',
            name='line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.line'),
        ),
        migrations.AddField(
            model_name='address',
            name='prefecture',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.prefecture'),
        ),
        migrations.AddField(
            model_name='address',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.station'),
        ),
    ]
