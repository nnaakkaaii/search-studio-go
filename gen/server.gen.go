// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for UserGender.
const (
	N1 UserGender = 1
	N2 UserGender = 2
	N3 UserGender = 3
)

// Address defines model for Address.
type Address struct {
	City        *City    `json:"city,omitempty"`
	FullAddress *string  `json:"full_address,omitempty"`
	Id          *int     `json:"id,omitempty"`
	Latitude    *float32 `json:"latitude,omitempty"`
	Longitude   *float32 `json:"longitude,omitempty"`
	Stations    *[]struct {
		MinutesFromStation *float32 `json:"minutes_from_station,omitempty"`
		Station            *Station `json:"station,omitempty"`
	} `json:"stations,omitempty"`
}

// Amenity defines model for Amenity.
type Amenity struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// City defines model for City.
type City struct {
	Id         *int        `json:"id,omitempty"`
	Name       *string     `json:"name,omitempty"`
	Prefecture *Prefecture `json:"prefecture,omitempty"`
}

// Image defines model for Image.
type Image struct {
	Description *string `json:"description,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Path        *string `json:"path,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Message *string `json:"message,omitempty"`
}

// Plan defines model for Plan.
type Plan struct {
	BeginTime *string    `json:"begin_time,omitempty"`
	EndTime   *string    `json:"end_time,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Price     *int       `json:"price,omitempty"`
	QuotaType *QuotaType `json:"quota_type,omitempty"`
}

// Prefecture defines model for Prefecture.
type Prefecture struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// QuotaType defines model for QuotaType.
type QuotaType struct {
	HourPerQuota        *float32 `json:"hour_per_quota,omitempty"`
	Id                  *int     `json:"id,omitempty"`
	MinReservableQuotas *int     `json:"min_reservable_quotas,omitempty"`
}

// Reservation defines model for Reservation.
type Reservation struct {
	Id            *int  `json:"id,omitempty"`
	IsCompleted   *bool `json:"is_completed,omitempty"`
	Plan          *Plan `json:"plan,omitempty"`
	TransactionId *int  `json:"transaction_id,omitempty"`
	User          *User `json:"user,omitempty"`
}

// Room defines model for Room.
type Room struct {
	Facilities          *[]RoomFacility `json:"facilities,omitempty"`
	FloorArea           *float32        `json:"floor_area,omitempty"`
	FloorMaterial       *string         `json:"floor_material,omitempty"`
	Id                  *int            `json:"id,omitempty"`
	Images              *[]Image        `json:"images,omitempty"`
	MaxReservablePeople *int            `json:"max_reservable_people,omitempty"`
	MinReservablePeople *int            `json:"min_reservable_people,omitempty"`
	MirrorLength        *float32        `json:"mirror_length,omitempty"`
	Name                *string         `json:"name,omitempty"`
	ReservationUrl      *string         `json:"reservation_url,omitempty"`
}

// RoomFacility defines model for RoomFacility.
type RoomFacility struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Station defines model for Station.
type Station struct {
	Id    *int       `json:"id,omitempty"`
	Lines *[]Station `json:"lines,omitempty"`
	Name  *string    `json:"name,omitempty"`
}

// Studio defines model for Studio.
type Studio struct {
	Address            *Address          `json:"address,omitempty"`
	AddressId          *int              `json:"address_id,omitempty"`
	Amenities          *[]Amenity        `json:"amenities,omitempty"`
	Contact            *string           `json:"contact,omitempty"`
	Facilities         *[]StudioFacility `json:"facilities,omitempty"`
	FreeCancelDate     *int              `json:"free_cancel_date,omitempty"`
	HomepageUrl        *string           `json:"homepage_url,omitempty"`
	Id                 *int              `json:"id,omitempty"`
	Images             *[]Image          `json:"images,omitempty"`
	Introduction       *string           `json:"introduction,omitempty"`
	MinReservableHours *float32          `json:"min_reservable_hours,omitempty"`
	Name               *string           `json:"name,omitempty"`
	Payments           *[]string         `json:"payments,omitempty"`
	Precaution         *string           `json:"precaution,omitempty"`
	Reservations       *[]string         `json:"reservations,omitempty"`
	Rooms              *[]Room           `json:"rooms,omitempty"`
}

// StudioFacility defines model for StudioFacility.
type StudioFacility struct {
	Id   *int    `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Address      *string             `json:"address,omitempty"`
	Birthdate    *openapi_types.Date `json:"birthdate,omitempty"`
	CityId       *int                `json:"city_id,omitempty"`
	Contact      *string             `json:"contact,omitempty"`
	Email1       *string             `json:"email1,omitempty"`
	Email2       *string             `json:"email2,omitempty"`
	FirstName    *string             `json:"first_name,omitempty"`
	Gender       *UserGender         `json:"gender,omitempty"`
	Id           *int                `json:"id,omitempty"`
	LastName     *string             `json:"last_name,omitempty"`
	Line         *string             `json:"line,omitempty"`
	MiddleName   *string             `json:"middle_name,omitempty"`
	Password     *string             `json:"password,omitempty"`
	PrefectureId *int                `json:"prefecture_id,omitempty"`
	Zip          *string             `json:"zip,omitempty"`
}

// UserGender defines model for User.Gender.
type UserGender int

// BeginDateQuery defines model for begin_date_query.
type BeginDateQuery = openapi_types.Date

// DateQuery defines model for date_query.
type DateQuery = openapi_types.Date

// EndDateQuery defines model for end_date_query.
type EndDateQuery = openapi_types.Date

// PageQuery defines model for page_query.
type PageQuery = int

// PlanId defines model for plan_id.
type PlanId = int

// QuotaTypeId defines model for quota_type_id.
type QuotaTypeId = int

// ReservationId defines model for reservation_id.
type ReservationId = int

// RoomId defines model for room_id.
type RoomId = int

// StudioId defines model for studio_id.
type StudioId = int

// PostApiAdminLoginParams defines parameters for PostApiAdminLogin.
type PostApiAdminLoginParams struct {
	// Cognito ユーザープールから取得した OIDC トークンで Bearer 認証
	Authorization string `json:"Authorization"`
}

// GetApiAdminStudiosParams defines parameters for GetApiAdminStudios.
type GetApiAdminStudiosParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// PostApiAdminStudiosJSONBody defines parameters for PostApiAdminStudios.
type PostApiAdminStudiosJSONBody = Studio

// GetApiAdminStudiosStudioIdPlansParams defines parameters for GetApiAdminStudiosStudioIdPlans.
type GetApiAdminStudiosStudioIdPlansParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// PostApiAdminStudiosStudioIdPlansJSONBody defines parameters for PostApiAdminStudiosStudioIdPlans.
type PostApiAdminStudiosStudioIdPlansJSONBody struct {
	BeginTime  *string `json:"begin_time,omitempty"`
	EndTime    *string `json:"end_time,omitempty"`
	Id         *int    `json:"id,omitempty"`
	Price      *int    `json:"price,omitempty"`
	SlotTypeId *int    `json:"slot_type_id,omitempty"`
}

// GetApiAdminStudiosStudioIdQuotaTypesParams defines parameters for GetApiAdminStudiosStudioIdQuotaTypes.
type GetApiAdminStudiosStudioIdQuotaTypesParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// PostApiAdminStudiosStudioIdQuotaTypesJSONBody defines parameters for PostApiAdminStudiosStudioIdQuotaTypes.
type PostApiAdminStudiosStudioIdQuotaTypesJSONBody = QuotaType

// GetApiAdminStudiosStudioIdRoomsParams defines parameters for GetApiAdminStudiosStudioIdRooms.
type GetApiAdminStudiosStudioIdRoomsParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// PostApiAdminStudiosStudioIdRoomsJSONBody defines parameters for PostApiAdminStudiosStudioIdRooms.
type PostApiAdminStudiosStudioIdRoomsJSONBody = Room

// GetApiAdminStudiosStudioIdRoomsRoomIdCalendarParams defines parameters for GetApiAdminStudiosStudioIdRoomsRoomIdCalendar.
type GetApiAdminStudiosStudioIdRoomsRoomIdCalendarParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`

	// デフォルト : 今日
	BeginDate *BeginDateQuery `form:"begin_date,omitempty" json:"begin_date,omitempty"`

	// デフォルト : 1週間後
	EndDate *EndDateQuery `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// PostApiAdminStudiosStudioIdRoomsRoomIdCalendarJSONBody defines parameters for PostApiAdminStudiosStudioIdRoomsRoomIdCalendar.
type PostApiAdminStudiosStudioIdRoomsRoomIdCalendarJSONBody struct {
	Date   *openapi_types.Date `json:"date,omitempty"`
	PlanId *int                `json:"plan_id,omitempty"`
}

// GetApiAdminStudiosStudioIdRoomsRoomIdReservationsParams defines parameters for GetApiAdminStudiosStudioIdRoomsRoomIdReservations.
type GetApiAdminStudiosStudioIdRoomsRoomIdReservationsParams struct {
	Date DateQuery `form:"date" json:"date"`
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsJSONBody defines parameters for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsJSONBody struct {
	Slots *[]struct {
		AvailablePlans *[]struct {
			Id *int `json:"id,omitempty"`
		} `json:"available_plans,omitempty"`
		BeginTime *string             `json:"begin_time,omitempty"`
		Date      *openapi_types.Date `json:"date,omitempty"`
		EndTime   *string             `json:"end_time,omitempty"`
	} `json:"slots,omitempty"`
}

// PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdJSONBody defines parameters for PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId.
type PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdJSONBody struct {
	Slots *[]struct {
		AvailablePlans *[]struct {
			Id *int `json:"id,omitempty"`
		} `json:"available_plans,omitempty"`
		BeginTime *string             `json:"begin_time,omitempty"`
		Date      *openapi_types.Date `json:"date,omitempty"`
		EndTime   *string             `json:"end_time,omitempty"`
	} `json:"slots,omitempty"`
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdCompleteJSONBody defines parameters for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdCompleteJSONBody struct {
	Source *string `json:"source,omitempty"`
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirmJSONBody defines parameters for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirmJSONBody struct {
	Memo          *string `json:"memo,omitempty"`
	ReservePeople *int    `json:"reserve_people,omitempty"`
}

// PostApiUserLoginParams defines parameters for PostApiUserLogin.
type PostApiUserLoginParams struct {
	// Cognito ユーザープールから取得した OIDC トークンで Bearer 認証
	Authorization string `json:"Authorization"`
}

// GetApiUserStudiosParams defines parameters for GetApiUserStudios.
type GetApiUserStudiosParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// GetApiUserStudiosStudioIdRoomsParams defines parameters for GetApiUserStudiosStudioIdRooms.
type GetApiUserStudiosStudioIdRoomsParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// GetApiUserStudiosStudioIdRoomsRoomIdParams defines parameters for GetApiUserStudiosStudioIdRoomsRoomId.
type GetApiUserStudiosStudioIdRoomsRoomIdParams struct {
	Page *PageQuery `form:"page,omitempty" json:"page,omitempty"`
}

// PostApiAdminStudiosJSONRequestBody defines body for PostApiAdminStudios for application/json ContentType.
type PostApiAdminStudiosJSONRequestBody = PostApiAdminStudiosJSONBody

// PostApiAdminStudiosStudioIdPlansJSONRequestBody defines body for PostApiAdminStudiosStudioIdPlans for application/json ContentType.
type PostApiAdminStudiosStudioIdPlansJSONRequestBody PostApiAdminStudiosStudioIdPlansJSONBody

// PostApiAdminStudiosStudioIdQuotaTypesJSONRequestBody defines body for PostApiAdminStudiosStudioIdQuotaTypes for application/json ContentType.
type PostApiAdminStudiosStudioIdQuotaTypesJSONRequestBody = PostApiAdminStudiosStudioIdQuotaTypesJSONBody

// PostApiAdminStudiosStudioIdRoomsJSONRequestBody defines body for PostApiAdminStudiosStudioIdRooms for application/json ContentType.
type PostApiAdminStudiosStudioIdRoomsJSONRequestBody = PostApiAdminStudiosStudioIdRoomsJSONBody

// PostApiAdminStudiosStudioIdRoomsRoomIdCalendarJSONRequestBody defines body for PostApiAdminStudiosStudioIdRoomsRoomIdCalendar for application/json ContentType.
type PostApiAdminStudiosStudioIdRoomsRoomIdCalendarJSONRequestBody PostApiAdminStudiosStudioIdRoomsRoomIdCalendarJSONBody

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsJSONRequestBody defines body for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations for application/json ContentType.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsJSONRequestBody PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsJSONBody

// PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdJSONRequestBody defines body for PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId for application/json ContentType.
type PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdJSONRequestBody PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdJSONBody

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdCompleteJSONRequestBody defines body for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete for application/json ContentType.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdCompleteJSONRequestBody PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdCompleteJSONBody

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirmJSONRequestBody defines body for PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm for application/json ContentType.
type PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirmJSONRequestBody PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirmJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/admin/login)
	PostApiAdminLogin(ctx echo.Context, params PostApiAdminLoginParams) error

	// (POST /api/admin/logout)
	PostApiAdminLogout(ctx echo.Context) error

	// (GET /api/admin/studios)
	GetApiAdminStudios(ctx echo.Context, params GetApiAdminStudiosParams) error

	// (POST /api/admin/studios)
	PostApiAdminStudios(ctx echo.Context) error

	// (GET /api/admin/studios/{studioId})
	GetApiAdminStudiosStudioId(ctx echo.Context, studioId StudioId) error

	// (GET /api/admin/studios/{studioId}/plans)
	GetApiAdminStudiosStudioIdPlans(ctx echo.Context, studioId StudioId, params GetApiAdminStudiosStudioIdPlansParams) error

	// (POST /api/admin/studios/{studioId}/plans)
	PostApiAdminStudiosStudioIdPlans(ctx echo.Context, studioId StudioId) error

	// (GET /api/admin/studios/{studioId}/plans/{planId})
	GetApiAdminStudiosStudioIdPlansPlanId(ctx echo.Context, studioId StudioId, planId PlanId) error

	// (GET /api/admin/studios/{studioId}/quota-types)
	GetApiAdminStudiosStudioIdQuotaTypes(ctx echo.Context, studioId StudioId, params GetApiAdminStudiosStudioIdQuotaTypesParams) error

	// (POST /api/admin/studios/{studioId}/quota-types)
	PostApiAdminStudiosStudioIdQuotaTypes(ctx echo.Context, studioId StudioId) error

	// (GET /api/admin/studios/{studioId}/quota-types/{quotaTypeId})
	GetApiAdminStudiosStudioIdQuotaTypesQuotaTypeId(ctx echo.Context, studioId StudioId, quotaTypeId QuotaTypeId) error

	// (GET /api/admin/studios/{studioId}/rooms)
	GetApiAdminStudiosStudioIdRooms(ctx echo.Context, studioId StudioId, params GetApiAdminStudiosStudioIdRoomsParams) error

	// (POST /api/admin/studios/{studioId}/rooms)
	PostApiAdminStudiosStudioIdRooms(ctx echo.Context, studioId StudioId) error

	// (GET /api/admin/studios/{studioId}/rooms/{roomId})
	GetApiAdminStudiosStudioIdRoomsRoomId(ctx echo.Context, studioId StudioId, roomId RoomId) error

	// (GET /api/admin/studios/{studioId}/rooms/{roomId}/calendar)
	GetApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx echo.Context, studioId StudioId, roomId RoomId, params GetApiAdminStudiosStudioIdRoomsRoomIdCalendarParams) error

	// (POST /api/admin/studios/{studioId}/rooms/{roomId}/calendar)
	PostApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx echo.Context, studioId StudioId, roomId RoomId) error

	// (GET /api/admin/studios/{studioId}/rooms/{roomId}/reservations)
	GetApiAdminStudiosStudioIdRoomsRoomIdReservations(ctx echo.Context, studioId StudioId, roomId RoomId, params GetApiAdminStudiosStudioIdRoomsRoomIdReservationsParams) error

	// (GET /api/admin/studios/{studioId}/rooms/{roomId}/reservations/{reservationId})
	GetApiAdminStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (POST /api/checkout/studios/{studioId}/rooms/{roomId}/reservations)
	PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations(ctx echo.Context, studioId StudioId, roomId RoomId) error

	// (DELETE /api/checkout/studios/{studioId}/rooms/{roomId}/reservations/{reservationId})
	DeleteApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (GET /api/checkout/studios/{studioId}/rooms/{roomId}/reservations/{reservationId})
	GetApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (PUT /api/checkout/studios/{studioId}/rooms/{roomId}/reservations/{reservationId})
	PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (POST /api/checkout/studios/{studioId}/rooms/{roomId}/reservations/{reservationId}/complete)
	PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (POST /api/checkout/studios/{studioId}/rooms/{roomId}/reservations/{reservationId}/confirm)
	PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm(ctx echo.Context, studioId StudioId, roomId RoomId, reservationId ReservationId) error

	// (POST /api/user/login)
	PostApiUserLogin(ctx echo.Context, params PostApiUserLoginParams) error

	// (POST /api/user/logout)
	PostApiUserLogout(ctx echo.Context) error

	// (GET /api/user/studios)
	GetApiUserStudios(ctx echo.Context, params GetApiUserStudiosParams) error

	// (GET /api/user/studios/{studioId})
	GetApiUserStudiosStudioId(ctx echo.Context, studioId StudioId) error

	// (GET /api/user/studios/{studioId}/rooms)
	GetApiUserStudiosStudioIdRooms(ctx echo.Context, studioId StudioId, params GetApiUserStudiosStudioIdRoomsParams) error

	// (GET /api/user/studios/{studioId}/rooms/{roomId})
	GetApiUserStudiosStudioIdRoomsRoomId(ctx echo.Context, studioId StudioId, roomId RoomId, params GetApiUserStudiosStudioIdRoomsRoomIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiAdminLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminLogin(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiAdminLoginParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminLogin(ctx, params)
	return err
}

// PostApiAdminLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminLogout(ctx)
	return err
}

// GetApiAdminStudios converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudios(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudios(ctx, params)
	return err
}

// PostApiAdminStudios converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminStudios(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminStudios(ctx)
	return err
}

// GetApiAdminStudiosStudioId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioId(ctx, studioId)
	return err
}

// GetApiAdminStudiosStudioIdPlans converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdPlans(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosStudioIdPlansParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdPlans(ctx, studioId, params)
	return err
}

// PostApiAdminStudiosStudioIdPlans converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminStudiosStudioIdPlans(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminStudiosStudioIdPlans(ctx, studioId)
	return err
}

// GetApiAdminStudiosStudioIdPlansPlanId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdPlansPlanId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "planId" -------------
	var planId PlanId

	err = runtime.BindStyledParameterWithLocation("simple", false, "planId", runtime.ParamLocationPath, ctx.Param("planId"), &planId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdPlansPlanId(ctx, studioId, planId)
	return err
}

// GetApiAdminStudiosStudioIdQuotaTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdQuotaTypes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosStudioIdQuotaTypesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdQuotaTypes(ctx, studioId, params)
	return err
}

// PostApiAdminStudiosStudioIdQuotaTypes converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminStudiosStudioIdQuotaTypes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminStudiosStudioIdQuotaTypes(ctx, studioId)
	return err
}

// GetApiAdminStudiosStudioIdQuotaTypesQuotaTypeId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdQuotaTypesQuotaTypeId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "quotaTypeId" -------------
	var quotaTypeId QuotaTypeId

	err = runtime.BindStyledParameterWithLocation("simple", false, "quotaTypeId", runtime.ParamLocationPath, ctx.Param("quotaTypeId"), &quotaTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quotaTypeId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdQuotaTypesQuotaTypeId(ctx, studioId, quotaTypeId)
	return err
}

// GetApiAdminStudiosStudioIdRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdRooms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosStudioIdRoomsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdRooms(ctx, studioId, params)
	return err
}

// PostApiAdminStudiosStudioIdRooms converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminStudiosStudioIdRooms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminStudiosStudioIdRooms(ctx, studioId)
	return err
}

// GetApiAdminStudiosStudioIdRoomsRoomId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdRoomsRoomId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdRoomsRoomId(ctx, studioId, roomId)
	return err
}

// GetApiAdminStudiosStudioIdRoomsRoomIdCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosStudioIdRoomsRoomIdCalendarParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "begin_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "begin_date", ctx.QueryParams(), &params.BeginDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter begin_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx, studioId, roomId, params)
	return err
}

// PostApiAdminStudiosStudioIdRoomsRoomIdCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiAdminStudiosStudioIdRoomsRoomIdCalendar(ctx, studioId, roomId)
	return err
}

// GetApiAdminStudiosStudioIdRoomsRoomIdReservations converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdRoomsRoomIdReservations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiAdminStudiosStudioIdRoomsRoomIdReservationsParams
	// ------------- Required query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, true, "date", ctx.QueryParams(), &params.Date)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdRoomsRoomIdReservations(ctx, studioId, roomId, params)
	return err
}

// GetApiAdminStudiosStudioIdRoomsRoomIdReservationsReservationId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAdminStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiAdminStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx, studioId, roomId, reservationId)
	return err
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations(ctx, studioId, roomId)
	return err
}

// DeleteApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx, studioId, roomId, reservationId)
	return err
}

// GetApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx, studioId, roomId, reservationId)
	return err
}

// PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId(ctx, studioId, roomId, reservationId)
	return err
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete(ctx, studioId, roomId, reservationId)
	return err
}

// PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	// ------------- Path parameter "reservationId" -------------
	var reservationId ReservationId

	err = runtime.BindStyledParameterWithLocation("simple", false, "reservationId", runtime.ParamLocationPath, ctx.Param("reservationId"), &reservationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reservationId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm(ctx, studioId, roomId, reservationId)
	return err
}

// PostApiUserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiUserLogin(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiUserLoginParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiUserLogin(ctx, params)
	return err
}

// PostApiUserLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiUserLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApiUserLogout(ctx)
	return err
}

// GetApiUserStudios converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUserStudios(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiUserStudiosParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiUserStudios(ctx, params)
	return err
}

// GetApiUserStudiosStudioId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUserStudiosStudioId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiUserStudiosStudioId(ctx, studioId)
	return err
}

// GetApiUserStudiosStudioIdRooms converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUserStudiosStudioIdRooms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiUserStudiosStudioIdRoomsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiUserStudiosStudioIdRooms(ctx, studioId, params)
	return err
}

// GetApiUserStudiosStudioIdRoomsRoomId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUserStudiosStudioIdRoomsRoomId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studioId" -------------
	var studioId StudioId

	err = runtime.BindStyledParameterWithLocation("simple", false, "studioId", runtime.ParamLocationPath, ctx.Param("studioId"), &studioId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studioId: %s", err))
	}

	// ------------- Path parameter "roomId" -------------
	var roomId RoomId

	err = runtime.BindStyledParameterWithLocation("simple", false, "roomId", runtime.ParamLocationPath, ctx.Param("roomId"), &roomId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter roomId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiUserStudiosStudioIdRoomsRoomIdParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiUserStudiosStudioIdRoomsRoomId(ctx, studioId, roomId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/admin/login", wrapper.PostApiAdminLogin)
	router.POST(baseURL+"/api/admin/logout", wrapper.PostApiAdminLogout)
	router.GET(baseURL+"/api/admin/studios", wrapper.GetApiAdminStudios)
	router.POST(baseURL+"/api/admin/studios", wrapper.PostApiAdminStudios)
	router.GET(baseURL+"/api/admin/studios/:studioId", wrapper.GetApiAdminStudiosStudioId)
	router.GET(baseURL+"/api/admin/studios/:studioId/plans", wrapper.GetApiAdminStudiosStudioIdPlans)
	router.POST(baseURL+"/api/admin/studios/:studioId/plans", wrapper.PostApiAdminStudiosStudioIdPlans)
	router.GET(baseURL+"/api/admin/studios/:studioId/plans/:planId", wrapper.GetApiAdminStudiosStudioIdPlansPlanId)
	router.GET(baseURL+"/api/admin/studios/:studioId/quota-types", wrapper.GetApiAdminStudiosStudioIdQuotaTypes)
	router.POST(baseURL+"/api/admin/studios/:studioId/quota-types", wrapper.PostApiAdminStudiosStudioIdQuotaTypes)
	router.GET(baseURL+"/api/admin/studios/:studioId/quota-types/:quotaTypeId", wrapper.GetApiAdminStudiosStudioIdQuotaTypesQuotaTypeId)
	router.GET(baseURL+"/api/admin/studios/:studioId/rooms", wrapper.GetApiAdminStudiosStudioIdRooms)
	router.POST(baseURL+"/api/admin/studios/:studioId/rooms", wrapper.PostApiAdminStudiosStudioIdRooms)
	router.GET(baseURL+"/api/admin/studios/:studioId/rooms/:roomId", wrapper.GetApiAdminStudiosStudioIdRoomsRoomId)
	router.GET(baseURL+"/api/admin/studios/:studioId/rooms/:roomId/calendar", wrapper.GetApiAdminStudiosStudioIdRoomsRoomIdCalendar)
	router.POST(baseURL+"/api/admin/studios/:studioId/rooms/:roomId/calendar", wrapper.PostApiAdminStudiosStudioIdRoomsRoomIdCalendar)
	router.GET(baseURL+"/api/admin/studios/:studioId/rooms/:roomId/reservations", wrapper.GetApiAdminStudiosStudioIdRoomsRoomIdReservations)
	router.GET(baseURL+"/api/admin/studios/:studioId/rooms/:roomId/reservations/:reservationId", wrapper.GetApiAdminStudiosStudioIdRoomsRoomIdReservationsReservationId)
	router.POST(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations", wrapper.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservations)
	router.DELETE(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations/:reservationId", wrapper.DeleteApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId)
	router.GET(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations/:reservationId", wrapper.GetApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId)
	router.PUT(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations/:reservationId", wrapper.PutApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationId)
	router.POST(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations/:reservationId/complete", wrapper.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdComplete)
	router.POST(baseURL+"/api/checkout/studios/:studioId/rooms/:roomId/reservations/:reservationId/confirm", wrapper.PostApiCheckoutStudiosStudioIdRoomsRoomIdReservationsReservationIdConfirm)
	router.POST(baseURL+"/api/user/login", wrapper.PostApiUserLogin)
	router.POST(baseURL+"/api/user/logout", wrapper.PostApiUserLogout)
	router.GET(baseURL+"/api/user/studios", wrapper.GetApiUserStudios)
	router.GET(baseURL+"/api/user/studios/:studioId", wrapper.GetApiUserStudiosStudioId)
	router.GET(baseURL+"/api/user/studios/:studioId/rooms", wrapper.GetApiUserStudiosStudioIdRooms)
	router.GET(baseURL+"/api/user/studios/:studioId/rooms/:roomId", wrapper.GetApiUserStudiosStudioIdRoomsRoomId)

}
